EA872 - 2s2018

OBJETIVOS
Ao fim destes experimentos, os alunos deverão ser capazes de projetar sistemas
para visualização de modelos físicos que operam em tempo real.

ROTEIRO DE ESTUDO

Parte 1: hello world do ncurses (10 min)
a) Verifique o código examples/ncurses-1/01-helloworld.c. O que ele faz? Lembre de
compilar com a flag -lncurses!
b) O que fazem as funções iniscr(), printw(), refresh(), getch() e endwin()

Parte 2: ilusão de movimento na tela (5 min)
a) Verifique o código examples/ncurses-1/02-walker.c. O que ele faz?
b) Como o programa cria a ilusão de que o sinal asterisco ('*') está "andando"
na tela?

Parte 3: mostrando um modelo físico na tela (5 min)
Verifique o código examples/ncurses-1/03-raster.c.
a) Que situação da física está sendo simulada?
b) Que tipo de variável (flat, int, char...) é usado para representar as
propriedades físicas do corpo que se movimenta? Por que esse tipo é relevante?
c) Que tipo de variável é usado para representar a posição na tela em que o
corpo será desenhado? Por que esse tipo é relevante para essa aplicação?
d) Como é realizada a conversão entre os dois tipos?

Parte 4: a componente View (20 min)
Verifique os códigos que estão em examples/ncurses-1/04-oo_model/*.
a) Compare-os com os códigos correspondentes em examples/chrono/03-oo_model/*.
Quais são as diferenças? Você vê alguma
b) Que parte do programa principal (mainloop) foi encapsulada na classe Tela()?
c) Identifique as classes que fazem parte do Model, do Controller e do View no
código orientado a objetos.

ATIVIDADE PRÁTICA
Esta atividade prática tem o objetivo de permitir a implementação de um
visualizador de modelos físicos que preserva as características do sistema
orientado a objetos.
1) Troque o modelo físico mostrado pelo sistema massa-mola-amortecedor e faça
com que vários osciladores diferentes possam ser visualizados na tela (da mesma
fora que, na implementação atual, há vários objetos caindo simultaneamente).
2) Na implementação atual, o sistema imprime lixo na tela caso o objeto a ser
representado esteja fora dos limites da tela (faça um teste, inicializando um
objeto numa posição muito alta). Modifique o programa para que objetos fora da
tela simplesmente não sejam impressos, isto é, fiquem "apagados" até que voltem
para o "campo de visão" da tela.


ENTREGAS
Colocar tudo em um arquivo .zip e enviar usando o sistema do Google Classroom!
* Código computacional, incluindo todos os arquivos necessários para a
  compilação e o Makefile (uma vez que eu vou rodar os programas usando os
  Makefiles). Lembrar de nomear o arquivo como RA1_RA2.zip (por exemplo:
  025304_025305.zip) e de colocar o nome da dupla (em comentário) em todos os
  arquivos entregues.

* Arquivo readme.txt com um breve texto (menos de 500 palavras!) explicitando e
  justificando as alterações nos arquivos-fonte em relação ao programa original.
  Também, o texto deve explicar onde os parâmetros do modelo estão
  implementados.

OBSERVAÇÕES
1) Na forma atual, o programa está feito de forma que uma classe é responsável
por reter dados, outra classe é responsável por processar dados e uma terceira
classe é responsável por mostrar dados na tela. Essa estrutura
deve, obrigatoriamente, ser mantida.

2) O prazo final para entrega é às 23h59 do dia marcado. Não serão permitidos
atrasos.

